Temperature sensor:
	Power: DC3.0V to 5.0V
	Red: VDD+
	Black: GND
	Yellow: DATA
	One 4.7k resistor between VDD+ and DATA
	
Pin #30 : Outlet: heater
Pin #31 : Outlet: Lights 1 (led)
Pin #32 : Outlet: Lights 2 (plant bulb)
NOT USED: Pin #33 : Outlet: Lights 3 (spot)
Pin #34 : Outlet: fertilizer dispenser
Pin #35 : Outlet: filter
Pin #37 : Outlet 1 LED
Pin #38 : Outlet 2 LED
Pin #39 : Outlet 3 LED
Pin #40 : Outlet 4 LED
Pin #41 : Outlet 5 LED
NOT USED: Pin #42 : Outlet 6 LED
Pin #43 : General Power LED
Pin #44 : Maintenance Mode LED
Pin #45 : Maintenance Mode Button
Pin #46 : Sensor 1: temperature (3pin) DS18B20
Pin #47 : Sensor 1:
Pin #48 : Sensor 1:
Pin #49 : Sensor 1:

30-37
31-38
32-39
34-40
35-41


Last wired relay needs to be backwards from the rest in order to have the filter run 24/7.
Five relays total = five output LED's + one maintenance mode LED = SIX total LED's.

Time to dispense 1 ml: 1000 ms or 1 second.

Create a ground rail and run to all AC outlets and AC inlet.
One leg of the AC outlet on a rail to AC inlet.
Second leg of each outlet coming from relay board.
Rail from AC inlet going to each relay board relay.



Next steps:
Demonstrate blinking LED
Demonstrate temperature reading
Demonstrate using relay to turn on and off light

DONE - Design the website.
Schedule gets sent from website.
Schedule read by Arduino and saved internally.
Manual control sent from website.
Manual control read and used by Arduino.
Make the manual ON/OFF switch interact with Arduino.
Make the maint mode status LED interact.
Send the maint mode flag to the website.
Make the MM pushbutton toggle a physical LED.
Make the MM pushbutton disable all other logic.
Website passes trigger value to Arduino.
Arduino receives trigger value and stores it.
Pass the temperature to the website.
Display the temperature on the website.
Add the sensor trigger logic for outlets.
Add the hourly logic for outlets.
Add the disabled function to outlets.
Have the device and sensor names output at the top of the boxes or stay in place on the input text field and remove the labels.

Make a configuration page that allows for setting up each device.
Make the MM pushbutton toggle the LED in the website.
Make the MM pushbutton disable website changes.
Save/load the state of the website or have the Arduino set it up correctly.
Make sure website shows menu items that have been previously enabled.
Add the sensor logging.
Add the sensor-hourly logic for outlets.

Make the C/F sensor toggle button function.
Make the sensor logging toggle interact with Arduino.
Setup a default config that can be loaded for a temperature sensor.
Setup a warnings notification box.
Setup a toggle for warnings on sensors with parameters.
Setup a relay activation trigger that allows selection of daily, weekly, monthly.
Add a hardware speaker for alarms.
Add a warnings parameter for triggering the speaker.
Make arduino able to track which outputs should be tied to maintmode shutoff
Look at bootstrap for making a much cleaner UI with navigation panes like a phone homescreen type deal


Parts list:
1x Arduino Mega 2560 - $14
1x Ethernet Shield - $12.98
1x 8GB SD Card - $6.99
1x 9V AC regulator - $5.99
6x AC outlet - $7.44
1x AC inlet with switch - $2.99
1x Power cable - $6.74
1x Water temperature sensor - $2.40
1x 4.7k ohm resistor - $.03
1x Peristaltic Pump - $4.00
1x Airline tubing - $5.00
1x 8 channel relay - $6.99
8x 5mm LED's - $2.00
1x pushbutton - $0.16
4x sensor connectors - $16.00
1x spool of wire - $4.50
1x electrical connectors - $0.10
1x heat shrink $0.30
1x ethernet cable - $5.00
1x 10k ohm resistor - $0.01
Total so far: $103.62

1x Acrylic sheets - 

Possibles:
1x resevoir tank - $26.88
1x regulator AC to DC for Arduino - $7.65


Webpage:

DONE - Setup variables to hold current aquarium setup in NodeJS.
DONE - Setup socket.connection to send those variables to the website.
DONE - Setup website messages to allow changing those variables.
DONE - Setup periodic saving of those variables.
DONE - Setup first start loading of those variables.

Setup warnings page and warnings button on home page.
	DONE - Warnings are being put beneath the HOME button - fix this.
	DONE - Warnings are not being added to the home page notification bar.
	DONE - Make sure the server forces the browser to refresh when an event is sent.
	Make it keep track of the number of rx'd warnings.

Complete the sensors page.
	DONE - Make sensor list display too low readings in blue.
	DONE - Good readings in green.
	DONE - Too high readings in red.
	DONE - Disabled sensors in grey. 
	DONE - Add interval check time of each sensor with default and minimum.

Complete the outlet config page.
	DONE - Add length of time to run device when on.  Default is one hour.

Complete the settings page.
	Add upload config file functionality.
	Add DL config file function.
	Add DL logs file function.
	Add clear logs file function.

DONE - Add control for setup sequence - displays special box with button to "Complete Setup" that turns everything on.

Add the sensor dropdown to outlet configs.
	DONE - Dropdown menu of enabled sensors.
	
DONE - Add debug setting.
	If on, console.logs are executed.
	If off, no console.logs.

Make an initial setup page and add a link to it to the settings page.
	DONE - Number of outlets to enable.
	DONE - Number of sensors to enable.
	DONE - Sound on/off.




Server:
	On load - check for config file present.
		-If present, load and start server monitoring.
		-If not present, disable server monitoring, load default settings, setup an audible alarm that pings.
	Add sound controller function.
		If sound is enabled, controller should beep when warnings are present.
	Server reads sensors from pins.
	Server sends warnings based on triggers.
	Server monitors outlets based on triggers.
	Server checks for existing CFG file, if not found directs first website visit to configuration.
	If configuration mode is entered and file is uploaded parse the file and confirm success.
		If not successful, prompt user to resubmit or do the configuration.
	Reset function should delete the config file and set the setup variable to 'on'.
	Add config file loading from website.
	Add logging to file.
	Add debug setting.
		If on, console.logs are executed.
		If off, no console.logs.










